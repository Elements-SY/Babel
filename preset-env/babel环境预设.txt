@babel/preset-env  // 译为babel插件 预设 环境;

targets 指定运行环境
targets.node 指定node版本
targets.browsers 指定浏览器版本

babel-preset-env是非常重要且常用的一个插件预设，掌握它的用法以及实现原理非常有必要。

最初，为了让开发者能够尽早用上新的JS特性，babel团队开发了babel-preset-latest。

这个preset比较特殊，它是多个preset的集合(es2015+)，并且随着ECMA规范的更新更增加它的内容。

比如，当前(2018.06.02)，它包含的preset包括：es2017、es1016、es2015。

到了明年，可能它包含的preset就包括：es2018、es2017、es2016、es2015。

随着时间的推移每出一个新提案就加一个，babel-preset-latest 包含的插件越来越多，

带来添加的插件越来越多，编译速度会越来越慢；

随着用户浏览器的升级，ECMA规范的支持逐步完善，编译至低版本规范的必要性在减少

（比如ES6 -> ES5），多余的转换不单降低执行效率，还浪费带宽。

因为上述问题的存在，babel官方推出了babel-preset-env插件。

它的出现取代了 preset-es20** 系列的babel 预设， 你再也不需要繁杂的兼容配置了。

它可以根据开发者的配置，

按需加载插件。配置项大致包括：

需要支持的平台：比如node、浏览器等。

需要支持的平台的版本：比如支持node@6.1等。

默认配置的情况下，它跟 babel-preset-latest 是等同的，会加载从es2015开始的所有preset。


@babel/preset-env babel预设环境插件 link: https://www.babeljs.cn/docs/babel-preset-env

@babel/preset-env babel预设环境插件API有以下:

targets、spec、loose、modules、debug、include、exclude、useBuiltIns等

详情请进入以上链接。

babel-preset-env 对象中的属性useBuiltIns提供 false, entry, usage 三种方式，

useBuiltIns它会根据目标环境自动按需引入core-js和regenerator-runtime，

usage，其功能更为强大，它会扫描你的代码，只有你的代码用到了哪个新的api，

使用 useBuiltIns:"useage", 还需要填写另一个参数 corejs 的版本号,

core-js 支持两个版本， 2 或 3， 很多新特性已经不会加入到 2 里面了， 

比如: flat 等等最新的方法， 2 这个版本里面都是没有的， 所以建议大家用3。

它才会引入相应的polyfill。

entry这是一种入口导入方式,只要我们在打包配置入口或者文件入口写入import "core-js"这样一串代码， 

babel 就会替我们根据当前你所配置的目标浏览器(browserslist)来引入所需要的polyfill 。

像这样， 我们在 index.js 文件中加入试一下core-js

entry": 在入口文件中加入所有的内置类型
如果在.babelrc中指定useBuiltIns: 'entry', 则应该在项目代码的顶部引入babel-polyfill

import "@babel/polyfill"
表示全量引入。

"usage": 只在当前文件中加入该文件用到的内置类型的polyfill。
设置为usage 不需要在顶部引入polyfill

"false": 不自动加入内置类型的polyfill。


// index.js
import "core-js";

function test() {
  new Promise()
}
test()
const arr = [1,2,3,4].map(item => item * item)
console.log(arr)

上述这样显然不太好，所以建议使用usage方式

false 是默认值，使用这个值时不引入 polyfill

preset-env.modules文档说明如下

"amd" | "umd" | "systemjs" | "commonjs" | "cjs" | "auto" | false, defaults to "auto"
指定将es6 modules 转换为何种模块规范。

一般在webpack 项目中，我们会将此参数设置为false,既将module交由webpack处理，而不是babel。

如果设置为false, 将不转换。这在node项目中如mocha测试中将不会转换import/export，可能会出错