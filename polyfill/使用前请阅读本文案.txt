1: cnpm i

2: babel index.js

如果仅是在终端输出转换结果，直接在控制台输入babel index.js回车执行即可。

如果是输出到文件，直接在控制台输入babel index.js -o xxx.js

或者babel index.js --watch --out-file index1.js即可;

--out-file 简写为 -o

如果相对某个文件夹下所有的js文件进行babel转换，babel 目标文件夹 -d 指定的文件夹，

如果指定的文件夹不存在，那么-d 后面可以新建一个，

待执行完该命令会生成一个新的文件夹，转换后的js会在该新文件夹中

babel src -d dest

@babel/polyfill // 译为babel插件 转换 箭头 函数;

从babel7.4.0开始，这个包已经被弃用，

而直接包含core-js/stable(用于polyfill ECMAScript功能)和

regenerator-runtime/runtime(需要使用换位的生成器函数):

Babel 转换了浏览器不支持的箭头函数和 Class，但是 Promise 并没有变化。

这是因为 Babel "presets"是用来配置处理“语法”的项,"plugins"是用来配置插件的项,

Babel "presets"只转换不兼容的新语法，而对新的 API，如:

Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise、Object.assign() 等，

是不会转换的。这时候就需要 polyfill 了。

在所需要转换的js未文件中引入import '@babel/polyfill'

When setting `useBuiltIns: 'usage'`, polyfills are automatically imported when needed.
当设置' useBuiltIns: 'usage' '时，需要时自动导入填充

polyfill'` call or use `useBuiltIns: 'entry'` instead.
polyfill' '调用或使用' useBuiltIns: 'entry' '来代替

import "core-js/modules/es6.promise";
import "core-js/modules/es6.object.to-string";